/**
 *  Pentair Pool Controller
 *
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 * Adapted from (name: "Pentair Controller", namespace: "michaelusner", author: "Michael Usner", oauth: true)
 */
 
 
metadata {
	definition (name: "Parent-Pentair StandAlone Pool Controller", namespace: "burninmoney", author: "Burnin Money", oauth: true) {
        //capability
        capability "Switch"
    	capability "Polling"        
        capability "Refresh"
       //commands
//        command "poolToggle"
 //       command "allPumpsToggle"
 //       command "highspeedToggle"
 //       command "displayCntr"
//        command "Toggle" ,["string"]
	}
   
    preferences {
       	section("Select your controller") {
       		input "controllerIP", "text", title: "Controller hostname/IP", required: true, displayDuringSetup: true
       		input "controllerPort", "port", title: "Controller port", required: true, defaultValue: "3000", displayDuringSetup: true
            input "username", "string", title:"Username", description: "username", required: true, displayDuringSetup: true
            input "password", "password", title:"Password", description: "Password", required: true, displayDuringSetup: true
            input "Speed Preset 1", "number", title: "Speed Preset 1", required: true, defaultValue: "2200", displayDuringSetup: true
            input "Speed Preset 2", "number", title: "Speed Preset 2", required: true, defaultValue: "2450", displayDuringSetup: true
            input "Speed Preset 3", "number", title: "Speed Preset 3", required: true, defaultValue: "2550", displayDuringSetup: true
            input "Speed Preset 4", "number", title: "Speed Preset 4", required: true, defaultValue: "2700", displayDuringSetup: true
            }
        } 
    
	simulator {
		// TODO: define status and reply messages here
	}
    
	tiles (scale: 2) {

		standardTile("switch", "device.switch", width: 2, height: 2, decoration: "flat") {
    	//state "off", label: '${currentValue}', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff", nextState:"on"
    	//state "on", label: '${currentValue}', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#00a0dc", nextState:"off"
		state "on", label: '${name}', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#00a0dc", nextState:"turningOff"
        state "off", label: '${name}', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff", nextState:"turningOn"
    	state "turningOn", label: '${name}', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#00a0dc", nextState:"turningOff"
        state "turningOff", label: '${name}', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff", nextState:"turningOn"
		}

        standardTile("refresh1", "device.refresh", width: 2, height: 2, canChangeBackground: true) {
        	state "Idle", label:'refresh', action:"refresh", icon:"st.secondary.refresh-icon", nextState: "Active", backgroundColor: "#ffffff", defaultState: true
            state "Active", label:'refresh', action:"refresh", icon:"st.secondary.refresh-icon", nextState: "Idle", backgroundColor: "#cccccc", defaultState: false
    	}      
      
        valueTile("Pump 1", "device.Pump 1", width: 3, height: 4, decoration: "flat", canChangeBackground: false) {
			state "val", label:'${currentValue}', defaultState: true
		}  
        
       
        //////////////////////////////////////////////////        
        main(["switch"])

        details(["switch","refresh1","Pump 1"])
	}
}

def initialize() {
	runEvery1Minute(refresh)

    //sendHubCommand(setFeature("/all"))
        
}

def refresh() {
    setDebugFlags(true)
	if (state.debug_all) log.warn "Requested a refresh"
    //poll()
	sendEvent(name: "refresh1", isStateChange: "true", value: "Active", descriptionText: "Refresh was activated")
    sendHubCommand(setFeature("/pump"))
}

def poll() {
	// poll gets /all & /device status messages from pool controller (raspberry Pi)
    // this runs every minute
    sendHubCommand(setFeature("/all"))
}

def setDebugFlags(value) {
    state.debug_all = value
}

def updated() {
    if (state.debug_all) log.info "######### UPDATED #########" 
    state.eggTimerORschedule = eggTimerORschedule
    
    setDebugFlags(false)
    switch (adebug) {
       case "ALL":
          setDebugFlags(true)
          break
       case "PARSE":
          state.debug_parse = true
          break    
       case "PUMP":
          state.debug_pump = true
          break      
       case "POOL":
          state.debug_pool = true
          state.debug_parse = true
          break
       default:
          setDebugFlags(false)
    }      
          
    initialize()
    refresh()
    
    setDeviceNetworkId("${controllerIP}","${controllerPort}")
//    addChildren()
}

def installed() {
	if (state.debug_all) log.info "########## installed ###########"

//    setDeviceNetworkId("${controllerIP}","${controllerPort}")
    initialize()

//    state.counter = state.counter ? state.counter + 1 : 1
//	if (state.counter == 1) {

}

//def addChildren() {
//
//childDevices.each {
//		try{
//			delayAction(5000)
//            deleteChildDevice(it.deviceNetworkId)
//		}
//		catch (e) {
//			log.debug "Error deleting ${it.deviceNetworkId}: ${e}"
//		}
//	}

//for (i in 1..4) {
//	 	 addChildDevice("burninmoney",
//                "Child-Pool Controller Preset",
//                "${device.deviceNetworkId}.${i}",
//                null,
//                [completedSetup: true, label: "${device.name} Speed Preset ${i}", isComponent: false, componentName: "SpeedPreset${i}", componentLabel: "Speed Preset ${i}"])/
//	    }
//}

def parse(String description) {
	log.info "############ Parse #############"
             
    def msg = parseLanMessage(description)
    if (!msg) {
       sendEvent(name: "refresh1", isStateChange: "true", value: "Idle", descriptionText: "Refresh was activated")
       //return null
    }
    
    //log.debug msg
    
    def xmlerror = msg.xmlError
    if (xmlerror) {
       log.error "Error: ${xmlerror}"
       return null
    }   
    
    // process xml response from /device
    // stop processing when done via return null
    if (msg.xml) {
        def body = new XmlSlurper().parseText(msg.body)
        def verMajor = body.specVersion.major
        def verMinor = body.specVersion.minor
        def verPatch = body.specVersion.patch
        def manufacturer = body.device.manufacturer
        def modelDescription = body.device.modelDescription
        def name = body.device.friendlyName
        state.version = "${name} Version\n${verMajor}.${verMinor}.${verPatch}"
        state.manufacturer = "By ${manufacturer}\n${modelDescription}"
        sendEvent(name: "refresh", isStateChange: "true", value: "Idle", descriptionText: "Refresh was activated")
        return null
    }    
   
    // process json messages
    def json = msg.data
    log.warn "json = ${json}"
    
    // return if no json
    if (!json) {
       sendEvent(name: "refresh", isStateChange: "true", value: "Idle", descriptionText: "Refresh was activated")
       return null
    }   
    
    // process each json key 
    json.keySet().each() {
      def key = it
      log.warn key
      switch (key) {
        case "value":
              if (state.debug_parse) log.warn "value = ${json.value}"
              break
        case "pump":      
//              if (state.debug_pump) log.info "### parse : pumps ###"
              def pumps = json.pump
              pumps.keySet().each {
                  def pump = pumps[it]
                  log.debug "pump ${it} = ${pump}"           
                  log.info "Pump name = " + pump.name
                  log.info "friendlyName = " + pump.friendlyName
                  sendEvent(name: "${pump.name}", value: "${pump.friendlyName}\n---Pump---\nWatts :${pump.watts} \nRPM :${pump.rpm} \nError :${pump.err}\nState :${pump.drivestate}\nMode :${pump.run}")
					}
                  
              break
        default:
            log.info "### parse : default ###"
            log.info "key = ${key}"   
   		}
   }
}

def off() {
	sendHubCommand(setFeature("/pumpCommand/off/pump/1"))
}

//def childOff(dni) {
//	off()
//}

def on() {
	sendHubCommand(setFeature("/pumpCommand/run/pump/1/duration/-1"))
}

//def childOn(dni) {
//	on()
//}

def setFeature(query) {
    def userpass = encodeCredentials(username, password)
    def headers = getHeader(userpass)
    def dni = setDeviceNetworkId("${controllerIP}","${controllerPort}")
	
    log.info "### Got to SetFeature function ###"      
    
    def poolAction = new physicalgraph.device.HubAction(
		method: "GET",
		path: query,
        headers: headers,
        dni
	)
    
    log.info "setFeature query: ${query}\npoolAction =\n${poolAction}"
	return poolAction
}

private delayAction(long time) {
    new physicalgraph.device.HubAction("delay $time")
}

private setDeviceNetworkId(ip,port){
      def iphex = convertIPtoHex(ip)
      def porthex = convertPortToHex(port)
      device.deviceNetworkId = "$iphex:$porthex"
      return (device.deviceNetworkId)
}

private getHostAddress() {
    return "${controllerIP}:${controllerPort}"
}

private String convertIPtoHex(ipAddress) { 
    String hex = ipAddress.tokenize( '.' ).collect {  String.format( '%02x', it.toInteger() ) }.join()
    return hex
}

private String convertPortToHex(port) {
    String hexport = port.toString().format( '%04x', port.toInteger() )
    return hexport
}

private encodeCredentials(username, password){
    def userpassascii = "${username}:${password}"
    def userpass = "Basic " + userpassascii.encodeAsBase64().toString()
    return userpass
}

private getHeader(userpass){
    def headers = [:]
    headers.put("HOST", "${controllerIP}:${controllerPort}")
    headers.put("Authorization", userpass)
    return headers
}
